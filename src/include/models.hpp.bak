
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_allModels_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_allModels");
    reader.add_event(218, 218, "end", "model_allModels");
    return reader;
}

class model_allModels : public prob_grad {
private:
    int N_;
    int n_b;
    int n_c;
    int n_t;
    int n_p;
    int n_ptm;
    vector<int> n_nc;
    int max_nc;
    vector<int> condID;
    vector<int> bioID;
    vector<int> ptm;
    vector<int> ptmPep;
    vector<vector<int> > condToBio;
    vector<int> bioToCond;
    int useCov;
    vector<double> covariate;
    vector<double> lr;
    double pop_sd;
    int bioInd;
public:
    model_allModels(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_allModels(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_allModels_namespace::model_allModels";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N_", "int", context__.to_vec());
            N_ = int(0);
            vals_i__ = context__.vals_i("N_");
            pos__ = 0;
            N_ = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "n_b", "int", context__.to_vec());
            n_b = int(0);
            vals_i__ = context__.vals_i("n_b");
            pos__ = 0;
            n_b = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_c", "int", context__.to_vec());
            n_c = int(0);
            vals_i__ = context__.vals_i("n_c");
            pos__ = 0;
            n_c = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "n_t", "int", context__.to_vec());
            n_t = int(0);
            vals_i__ = context__.vals_i("n_t");
            pos__ = 0;
            n_t = vals_i__[pos__++];
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "n_p", "int", context__.to_vec());
            n_p = int(0);
            vals_i__ = context__.vals_i("n_p");
            pos__ = 0;
            n_p = vals_i__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "n_ptm", "int", context__.to_vec());
            n_ptm = int(0);
            vals_i__ = context__.vals_i("n_ptm");
            pos__ = 0;
            n_ptm = vals_i__[pos__++];
            current_statement_begin__ = 10;
            validate_non_negative_index("n_nc", "n_c", n_c);
            context__.validate_dims("data initialization", "n_nc", "int", context__.to_vec(n_c));
            validate_non_negative_index("n_nc", "n_c", n_c);
            n_nc = std::vector<int>(n_c,int(0));
            vals_i__ = context__.vals_i("n_nc");
            pos__ = 0;
            size_t n_nc_limit_0__ = n_c;
            for (size_t i_0__ = 0; i_0__ < n_nc_limit_0__; ++i_0__) {
                n_nc[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "max_nc", "int", context__.to_vec());
            max_nc = int(0);
            vals_i__ = context__.vals_i("max_nc");
            pos__ = 0;
            max_nc = vals_i__[pos__++];
            current_statement_begin__ = 13;
            validate_non_negative_index("condID", "N_", N_);
            context__.validate_dims("data initialization", "condID", "int", context__.to_vec(N_));
            validate_non_negative_index("condID", "N_", N_);
            condID = std::vector<int>(N_,int(0));
            vals_i__ = context__.vals_i("condID");
            pos__ = 0;
            size_t condID_limit_0__ = N_;
            for (size_t i_0__ = 0; i_0__ < condID_limit_0__; ++i_0__) {
                condID[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("bioID", "N_", N_);
            context__.validate_dims("data initialization", "bioID", "int", context__.to_vec(N_));
            validate_non_negative_index("bioID", "N_", N_);
            bioID = std::vector<int>(N_,int(0));
            vals_i__ = context__.vals_i("bioID");
            pos__ = 0;
            size_t bioID_limit_0__ = N_;
            for (size_t i_0__ = 0; i_0__ < bioID_limit_0__; ++i_0__) {
                bioID[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("ptm", "N_", N_);
            context__.validate_dims("data initialization", "ptm", "int", context__.to_vec(N_));
            validate_non_negative_index("ptm", "N_", N_);
            ptm = std::vector<int>(N_,int(0));
            vals_i__ = context__.vals_i("ptm");
            pos__ = 0;
            size_t ptm_limit_0__ = N_;
            for (size_t i_0__ = 0; i_0__ < ptm_limit_0__; ++i_0__) {
                ptm[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("ptmPep", "N_", N_);
            context__.validate_dims("data initialization", "ptmPep", "int", context__.to_vec(N_));
            validate_non_negative_index("ptmPep", "N_", N_);
            ptmPep = std::vector<int>(N_,int(0));
            vals_i__ = context__.vals_i("ptmPep");
            pos__ = 0;
            size_t ptmPep_limit_0__ = N_;
            for (size_t i_0__ = 0; i_0__ < ptmPep_limit_0__; ++i_0__) {
                ptmPep[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("condToBio", "n_c", n_c);
            validate_non_negative_index("condToBio", "std::max(max_nc,1)", std::max(max_nc,1));
            context__.validate_dims("data initialization", "condToBio", "int", context__.to_vec(n_c,std::max(max_nc,1)));
            validate_non_negative_index("condToBio", "n_c", n_c);
            validate_non_negative_index("condToBio", "std::max(max_nc,1)", std::max(max_nc,1));
            condToBio = std::vector<std::vector<int> >(n_c,std::vector<int>(std::max(max_nc,1),int(0)));
            vals_i__ = context__.vals_i("condToBio");
            pos__ = 0;
            size_t condToBio_limit_1__ = std::max(max_nc,1);
            for (size_t i_1__ = 0; i_1__ < condToBio_limit_1__; ++i_1__) {
                size_t condToBio_limit_0__ = n_c;
                for (size_t i_0__ = 0; i_0__ < condToBio_limit_0__; ++i_0__) {
                    condToBio[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("bioToCond", "n_b", n_b);
            context__.validate_dims("data initialization", "bioToCond", "int", context__.to_vec(n_b));
            validate_non_negative_index("bioToCond", "n_b", n_b);
            bioToCond = std::vector<int>(n_b,int(0));
            vals_i__ = context__.vals_i("bioToCond");
            pos__ = 0;
            size_t bioToCond_limit_0__ = n_b;
            for (size_t i_0__ = 0; i_0__ < bioToCond_limit_0__; ++i_0__) {
                bioToCond[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "useCov", "int", context__.to_vec());
            useCov = int(0);
            vals_i__ = context__.vals_i("useCov");
            pos__ = 0;
            useCov = vals_i__[pos__++];
            current_statement_begin__ = 23;
            validate_non_negative_index("covariate", "N_", N_);
            context__.validate_dims("data initialization", "covariate", "double", context__.to_vec(N_));
            validate_non_negative_index("covariate", "N_", N_);
            covariate = std::vector<double>(N_,double(0));
            vals_r__ = context__.vals_r("covariate");
            pos__ = 0;
            size_t covariate_limit_0__ = N_;
            for (size_t i_0__ = 0; i_0__ < covariate_limit_0__; ++i_0__) {
                covariate[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("lr", "N_", N_);
            context__.validate_dims("data initialization", "lr", "double", context__.to_vec(N_));
            validate_non_negative_index("lr", "N_", N_);
            lr = std::vector<double>(N_,double(0));
            vals_r__ = context__.vals_r("lr");
            pos__ = 0;
            size_t lr_limit_0__ = N_;
            for (size_t i_0__ = 0; i_0__ < lr_limit_0__; ++i_0__) {
                lr[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "pop_sd", "double", context__.to_vec());
            pop_sd = double(0);
            vals_r__ = context__.vals_r("pop_sd");
            pos__ = 0;
            pop_sd = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"N_",N_,0);
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"n_b",n_b,0);
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"n_c",n_c,0);
            current_statement_begin__ = 7;
            check_greater_or_equal(function__,"n_t",n_t,0);
            current_statement_begin__ = 8;
            check_greater_or_equal(function__,"n_p",n_p,0);
            current_statement_begin__ = 9;
            check_greater_or_equal(function__,"n_ptm",n_ptm,0);
            current_statement_begin__ = 10;
            for (int k0__ = 0; k0__ < n_c; ++k0__) {
                check_greater_or_equal(function__,"n_nc[k0__]",n_nc[k0__],0);
            }
            current_statement_begin__ = 11;
            check_greater_or_equal(function__,"max_nc",max_nc,0);
            current_statement_begin__ = 13;
            for (int k0__ = 0; k0__ < N_; ++k0__) {
                check_greater_or_equal(function__,"condID[k0__]",condID[k0__],0);
                check_less_or_equal(function__,"condID[k0__]",condID[k0__],n_c);
            }
            current_statement_begin__ = 14;
            for (int k0__ = 0; k0__ < N_; ++k0__) {
                check_greater_or_equal(function__,"bioID[k0__]",bioID[k0__],0);
                check_less_or_equal(function__,"bioID[k0__]",bioID[k0__],n_b);
            }
            current_statement_begin__ = 17;
            for (int k0__ = 0; k0__ < N_; ++k0__) {
                check_greater_or_equal(function__,"ptm[k0__]",ptm[k0__],0);
                check_less_or_equal(function__,"ptm[k0__]",ptm[k0__],n_ptm);
            }
            current_statement_begin__ = 18;
            for (int k0__ = 0; k0__ < N_; ++k0__) {
                check_greater_or_equal(function__,"ptmPep[k0__]",ptmPep[k0__],0);
                check_less_or_equal(function__,"ptmPep[k0__]",ptmPep[k0__],n_p);
            }
            current_statement_begin__ = 19;
            for (int k0__ = 0; k0__ < n_c; ++k0__) {
                for (int k1__ = 0; k1__ < std::max(max_nc,1); ++k1__) {
                    check_greater_or_equal(function__,"condToBio[k0__][k1__]",condToBio[k0__][k1__],0);
                    check_less_or_equal(function__,"condToBio[k0__][k1__]",condToBio[k0__][k1__],n_b);
                }
            }
            current_statement_begin__ = 20;
            for (int k0__ = 0; k0__ < n_b; ++k0__) {
                check_greater_or_equal(function__,"bioToCond[k0__]",bioToCond[k0__],0);
                check_less_or_equal(function__,"bioToCond[k0__]",bioToCond[k0__],n_c);
            }
            current_statement_begin__ = 22;
            check_greater_or_equal(function__,"useCov",useCov,0);
            current_statement_begin__ = 23;
            for (int k0__ = 0; k0__ < N_; ++k0__) {
                check_greater_or_equal(function__,"covariate[k0__]",covariate[k0__],0);
            }
            current_statement_begin__ = 26;
            current_statement_begin__ = 28;
            check_greater_or_equal(function__,"pop_sd",pop_sd,0);
            // initialize data variables
            current_statement_begin__ = 33;
            bioInd = int(0);
            stan::math::fill(bioInd, std::numeric_limits<int>::min());

            current_statement_begin__ = 34;
            stan::math::assign(bioInd, (logical_eq(n_b,n_c) ? 0 : 1 ));

            // validate transformed data
            current_statement_begin__ = 33;
            check_greater_or_equal(function__,"bioInd",bioInd,0);

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 38;
            validate_non_negative_index("beta", "n_c", n_c);
            num_params_r__ += n_c;
            current_statement_begin__ = 39;
            validate_non_negative_index("beta_b", "(n_b * bioInd)", (n_b * bioInd));
            num_params_r__ += (n_b * bioInd);
            current_statement_begin__ = 41;
            validate_non_negative_index("alpha", "n_p", n_p);
            num_params_r__ += n_p;
            current_statement_begin__ = 43;
            validate_non_negative_index("sigma_raw", "(n_c * (1 - bioInd))", (n_c * (1 - bioInd)));
            num_params_r__ += (n_c * (1 - bioInd));
            current_statement_begin__ = 44;
            validate_non_negative_index("sigma_rawb", "(n_b * bioInd)", (n_b * bioInd));
            num_params_r__ += (n_b * bioInd);
            current_statement_begin__ = 45;
            ++num_params_r__;
            current_statement_begin__ = 47;
            validate_non_negative_index("xi", "n_ptm", n_ptm);
            num_params_r__ += n_ptm;
            current_statement_begin__ = 48;
            validate_non_negative_index("delta", "useCov", useCov);
            num_params_r__ += useCov;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_allModels() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "n_c", n_c);
        context__.validate_dims("initialization", "beta", "double", context__.to_vec(n_c));
        std::vector<double> beta(n_c,double(0));
        for (int i0__ = 0U; i0__ < n_c; ++i0__)
            beta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_c; ++i0__)
            try {
            writer__.scalar_unconstrain(beta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("beta_b")))
            throw std::runtime_error("variable beta_b missing");
        vals_r__ = context__.vals_r("beta_b");
        pos__ = 0U;
        validate_non_negative_index("beta_b", "(n_b * bioInd)", (n_b * bioInd));
        context__.validate_dims("initialization", "beta_b", "double", context__.to_vec((n_b * bioInd)));
        std::vector<double> beta_b((n_b * bioInd),double(0));
        for (int i0__ = 0U; i0__ < (n_b * bioInd); ++i0__)
            beta_b[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (n_b * bioInd); ++i0__)
            try {
            writer__.scalar_unconstrain(beta_b[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_b: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "n_p", n_p);
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec(n_p));
        std::vector<double> alpha(n_p,double(0));
        for (int i0__ = 0U; i0__ < n_p; ++i0__)
            alpha[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_p; ++i0__)
            try {
            writer__.scalar_unconstrain(alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("sigma_raw")))
            throw std::runtime_error("variable sigma_raw missing");
        vals_r__ = context__.vals_r("sigma_raw");
        pos__ = 0U;
        validate_non_negative_index("sigma_raw", "(n_c * (1 - bioInd))", (n_c * (1 - bioInd)));
        context__.validate_dims("initialization", "sigma_raw", "double", context__.to_vec((n_c * (1 - bioInd))));
        std::vector<double> sigma_raw((n_c * (1 - bioInd)),double(0));
        for (int i0__ = 0U; i0__ < (n_c * (1 - bioInd)); ++i0__)
            sigma_raw[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (n_c * (1 - bioInd)); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_raw: ") + e.what());
        }

        if (!(context__.contains_r("sigma_rawb")))
            throw std::runtime_error("variable sigma_rawb missing");
        vals_r__ = context__.vals_r("sigma_rawb");
        pos__ = 0U;
        validate_non_negative_index("sigma_rawb", "(n_b * bioInd)", (n_b * bioInd));
        context__.validate_dims("initialization", "sigma_rawb", "double", context__.to_vec((n_b * bioInd)));
        std::vector<double> sigma_rawb((n_b * bioInd),double(0));
        for (int i0__ = 0U; i0__ < (n_b * bioInd); ++i0__)
            sigma_rawb[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (n_b * bioInd); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma_rawb[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_rawb: ") + e.what());
        }

        if (!(context__.contains_r("scale")))
            throw std::runtime_error("variable scale missing");
        vals_r__ = context__.vals_r("scale");
        pos__ = 0U;
        context__.validate_dims("initialization", "scale", "double", context__.to_vec());
        double scale(0);
        scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,scale);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable scale: ") + e.what());
        }

        if (!(context__.contains_r("xi")))
            throw std::runtime_error("variable xi missing");
        vals_r__ = context__.vals_r("xi");
        pos__ = 0U;
        validate_non_negative_index("xi", "n_ptm", n_ptm);
        context__.validate_dims("initialization", "xi", "double", context__.to_vec(n_ptm));
        std::vector<double> xi(n_ptm,double(0));
        for (int i0__ = 0U; i0__ < n_ptm; ++i0__)
            xi[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_ptm; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,xi[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xi: ") + e.what());
        }

        if (!(context__.contains_r("delta")))
            throw std::runtime_error("variable delta missing");
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "useCov", useCov);
        context__.validate_dims("initialization", "delta", "double", context__.to_vec(useCov));
        std::vector<double> delta(useCov,double(0));
        for (int i0__ = 0U; i0__ < useCov; ++i0__)
            delta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < useCov; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,delta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            vector<T__> beta;
            size_t dim_beta_0__ = n_c;
            beta.reserve(dim_beta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_beta_0__; ++k_0__) {
                if (jacobian__)
                    beta.push_back(in__.scalar_constrain(lp__));
                else
                    beta.push_back(in__.scalar_constrain());
            }

            vector<T__> beta_b;
            size_t dim_beta_b_0__ = (n_b * bioInd);
            beta_b.reserve(dim_beta_b_0__);
            for (size_t k_0__ = 0; k_0__ < dim_beta_b_0__; ++k_0__) {
                if (jacobian__)
                    beta_b.push_back(in__.scalar_constrain(lp__));
                else
                    beta_b.push_back(in__.scalar_constrain());
            }

            vector<T__> alpha;
            size_t dim_alpha_0__ = n_p;
            alpha.reserve(dim_alpha_0__);
            for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_constrain(lp__));
                else
                    alpha.push_back(in__.scalar_constrain());
            }

            vector<T__> sigma_raw;
            size_t dim_sigma_raw_0__ = (n_c * (1 - bioInd));
            sigma_raw.reserve(dim_sigma_raw_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sigma_raw_0__; ++k_0__) {
                if (jacobian__)
                    sigma_raw.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sigma_raw.push_back(in__.scalar_lb_constrain(0));
            }

            vector<T__> sigma_rawb;
            size_t dim_sigma_rawb_0__ = (n_b * bioInd);
            sigma_rawb.reserve(dim_sigma_rawb_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sigma_rawb_0__; ++k_0__) {
                if (jacobian__)
                    sigma_rawb.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sigma_rawb.push_back(in__.scalar_lb_constrain(0));
            }

            T__ scale;
            (void) scale;  // dummy to suppress unused var warning
            if (jacobian__)
                scale = in__.scalar_lb_constrain(0,lp__);
            else
                scale = in__.scalar_lb_constrain(0);

            vector<T__> xi;
            size_t dim_xi_0__ = n_ptm;
            xi.reserve(dim_xi_0__);
            for (size_t k_0__ = 0; k_0__ < dim_xi_0__; ++k_0__) {
                if (jacobian__)
                    xi.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    xi.push_back(in__.scalar_lb_constrain(0));
            }

            vector<T__> delta;
            size_t dim_delta_0__ = useCov;
            delta.reserve(dim_delta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_delta_0__; ++k_0__) {
                if (jacobian__)
                    delta.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    delta.push_back(in__.scalar_lb_constrain(0));
            }


            // transformed parameters
            current_statement_begin__ = 52;
            validate_non_negative_index("betaP_c", "(useCov * n_c)", (useCov * n_c));
            vector<T__> betaP_c((useCov * n_c));
            stan::math::initialize(betaP_c, DUMMY_VAR__);
            stan::math::fill(betaP_c,DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("betaP_b", "((useCov * n_b) * bioInd)", ((useCov * n_b) * bioInd));
            vector<T__> betaP_b(((useCov * n_b) * bioInd));
            stan::math::initialize(betaP_b, DUMMY_VAR__);
            stan::math::fill(betaP_b,DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("sigma", "(n_c * (1 - bioInd))", (n_c * (1 - bioInd)));
            vector<T__> sigma((n_c * (1 - bioInd)));
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma,DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("sigmab", "(n_b * bioInd)", (n_b * bioInd));
            vector<T__> sigmab((n_b * bioInd));
            stan::math::initialize(sigmab, DUMMY_VAR__);
            stan::math::fill(sigmab,DUMMY_VAR__);


            current_statement_begin__ = 58;
            if (as_bool(logical_eq(bioInd,0))) {

                current_statement_begin__ = 59;
                for (int i = 1; i <= n_c; ++i) {

                    current_statement_begin__ = 60;
                    stan::math::assign(get_base1_lhs(sigma,i,"sigma",1), (scale * get_base1(sigma_raw,i,"sigma_raw",1)));
                }
            }
            current_statement_begin__ = 64;
            if (as_bool(logical_eq(bioInd,1))) {

                current_statement_begin__ = 65;
                for (int i = 1; i <= n_b; ++i) {

                    current_statement_begin__ = 66;
                    stan::math::assign(get_base1_lhs(sigmab,i,"sigmab",1), (scale * get_base1(sigma_rawb,i,"sigma_rawb",1)));
                }
            }
            current_statement_begin__ = 80;
            if (as_bool((primitive_value(logical_eq(bioInd,0)) && primitive_value(logical_gt(useCov,0))))) {

                current_statement_begin__ = 81;
                for (int i = 1; i <= n_c; ++i) {

                    current_statement_begin__ = 82;
                    stan::math::assign(get_base1_lhs(betaP_c,i,"betaP_c",1), (get_base1(beta,i,"beta",1) * (1 + get_base1(delta,useCov,"delta",1))));
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < (useCov * n_c); ++i0__) {
                if (stan::math::is_uninitialized(betaP_c[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: betaP_c" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < ((useCov * n_b) * bioInd); ++i0__) {
                if (stan::math::is_uninitialized(betaP_b[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: betaP_b" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < (n_c * (1 - bioInd)); ++i0__) {
                if (stan::math::is_uninitialized(sigma[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < (n_b * bioInd); ++i0__) {
                if (stan::math::is_uninitialized(sigmab[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigmab" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 52;
            current_statement_begin__ = 53;
            current_statement_begin__ = 54;
            for (int k0__ = 0; k0__ < (n_c * (1 - bioInd)); ++k0__) {
                check_greater_or_equal(function__,"sigma[k0__]",sigma[k0__],0);
            }
            current_statement_begin__ = 55;
            for (int k0__ = 0; k0__ < (n_b * bioInd); ++k0__) {
                check_greater_or_equal(function__,"sigmab[k0__]",sigmab[k0__],0);
            }

            // model body

            current_statement_begin__ = 91;
            lp_accum__.add(normal_log<propto__>(scale, 0, 5));
            current_statement_begin__ = 92;
            lp_accum__.add(normal_log<propto__>(beta, 0, 10));
            current_statement_begin__ = 95;
            if (as_bool(logical_gt(n_ptm,0))) {

                current_statement_begin__ = 96;
                for (int i = 1; i <= n_ptm; ++i) {

                    current_statement_begin__ = 97;
                    lp_accum__.add(cauchy_log<propto__>(get_base1(xi,i,"xi",1), 0, 5));
                }
                current_statement_begin__ = 99;
                for (int i = 1; i <= n_p; ++i) {

                    current_statement_begin__ = 100;
                    lp_accum__.add(normal_log<propto__>(get_base1(alpha,i,"alpha",1), 0, 10));
                }
            }
            current_statement_begin__ = 105;
            if (as_bool(logical_eq(useCov,0))) {

                current_statement_begin__ = 107;
                if (as_bool(logical_eq(bioInd,0))) {

                    current_statement_begin__ = 109;
                    for (int i = 1; i <= n_c; ++i) {

                        current_statement_begin__ = 110;
                        lp_accum__.add(inv_gamma_log<propto__>(get_base1(sigma_raw,i,"sigma_raw",1), 1, 1));
                    }
                    current_statement_begin__ = 112;
                    for (int i = 1; i <= N_; ++i) {

                        current_statement_begin__ = 113;
                        if (as_bool(logical_eq(get_base1(ptm,i,"ptm",1),0))) {

                            current_statement_begin__ = 114;
                            lp_accum__.add(normal_log<propto__>(get_base1(lr,i,"lr",1), get_base1(beta,get_base1(condID,i,"condID",1),"beta",1), get_base1(sigma,get_base1(condID,i,"condID",1),"sigma",1)));
                        }
                        current_statement_begin__ = 116;
                        if (as_bool(logical_gt(get_base1(ptm,i,"ptm",1),0))) {

                            current_statement_begin__ = 117;
                            lp_accum__.add(normal_log<propto__>(get_base1(lr,i,"lr",1), (get_base1(beta,get_base1(condID,i,"condID",1),"beta",1) + get_base1(alpha,get_base1(ptmPep,i,"ptmPep",1),"alpha",1)), get_base1(xi,get_base1(ptm,i,"ptm",1),"xi",1)));
                        }
                    }
                }
                current_statement_begin__ = 124;
                if (as_bool(logical_gt(bioInd,0))) {

                    current_statement_begin__ = 126;
                    for (int i = 1; i <= n_b; ++i) {

                        current_statement_begin__ = 128;
                        lp_accum__.add(normal_log<propto__>(get_base1(beta_b,i,"beta_b",1), get_base1(beta,get_base1(bioToCond,i,"bioToCond",1),"beta",1), pop_sd));
                        current_statement_begin__ = 129;
                        lp_accum__.add(inv_gamma_log<propto__>(get_base1(sigma_rawb,i,"sigma_rawb",1), 1, 1));
                    }
                    current_statement_begin__ = 131;
                    for (int i = 1; i <= N_; ++i) {

                        current_statement_begin__ = 132;
                        if (as_bool(logical_eq(get_base1(ptm,i,"ptm",1),0))) {

                            current_statement_begin__ = 133;
                            lp_accum__.add(normal_log<propto__>(get_base1(lr,i,"lr",1), get_base1(beta_b,get_base1(bioID,i,"bioID",1),"beta_b",1), get_base1(sigmab,get_base1(bioID,i,"bioID",1),"sigmab",1)));
                        }
                        current_statement_begin__ = 135;
                        if (as_bool(logical_gt(get_base1(ptm,i,"ptm",1),0))) {

                            current_statement_begin__ = 136;
                            lp_accum__.add(normal_log<propto__>(get_base1(lr,i,"lr",1), (get_base1(beta_b,get_base1(bioID,i,"bioID",1),"beta_b",1) + get_base1(alpha,get_base1(ptmPep,i,"ptmPep",1),"alpha",1)), get_base1(xi,get_base1(ptm,i,"ptm",1),"xi",1)));
                        }
                    }
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("beta_b");
        names__.push_back("alpha");
        names__.push_back("sigma_raw");
        names__.push_back("sigma_rawb");
        names__.push_back("scale");
        names__.push_back("xi");
        names__.push_back("delta");
        names__.push_back("betaP_c");
        names__.push_back("betaP_b");
        names__.push_back("sigma");
        names__.push_back("sigmab");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_c);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_b * bioInd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_c * (1 - bioInd)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_b * bioInd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ptm);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(useCov);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((useCov * n_c));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((useCov * n_b) * bioInd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_c * (1 - bioInd)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_b * bioInd));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_allModels_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> beta;
        size_t dim_beta_0__ = n_c;
        for (size_t k_0__ = 0; k_0__ < dim_beta_0__; ++k_0__) {
            beta.push_back(in__.scalar_constrain());
        }
        vector<double> beta_b;
        size_t dim_beta_b_0__ = (n_b * bioInd);
        for (size_t k_0__ = 0; k_0__ < dim_beta_b_0__; ++k_0__) {
            beta_b.push_back(in__.scalar_constrain());
        }
        vector<double> alpha;
        size_t dim_alpha_0__ = n_p;
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            alpha.push_back(in__.scalar_constrain());
        }
        vector<double> sigma_raw;
        size_t dim_sigma_raw_0__ = (n_c * (1 - bioInd));
        for (size_t k_0__ = 0; k_0__ < dim_sigma_raw_0__; ++k_0__) {
            sigma_raw.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> sigma_rawb;
        size_t dim_sigma_rawb_0__ = (n_b * bioInd);
        for (size_t k_0__ = 0; k_0__ < dim_sigma_rawb_0__; ++k_0__) {
            sigma_rawb.push_back(in__.scalar_lb_constrain(0));
        }
        double scale = in__.scalar_lb_constrain(0);
        vector<double> xi;
        size_t dim_xi_0__ = n_ptm;
        for (size_t k_0__ = 0; k_0__ < dim_xi_0__; ++k_0__) {
            xi.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> delta;
        size_t dim_delta_0__ = useCov;
        for (size_t k_0__ = 0; k_0__ < dim_delta_0__; ++k_0__) {
            delta.push_back(in__.scalar_lb_constrain(0));
        }
            for (int k_0__ = 0; k_0__ < n_c; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (n_b * bioInd); ++k_0__) {
            vars__.push_back(beta_b[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n_p; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (n_c * (1 - bioInd)); ++k_0__) {
            vars__.push_back(sigma_raw[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (n_b * bioInd); ++k_0__) {
            vars__.push_back(sigma_rawb[k_0__]);
            }
        vars__.push_back(scale);
            for (int k_0__ = 0; k_0__ < n_ptm; ++k_0__) {
            vars__.push_back(xi[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < useCov; ++k_0__) {
            vars__.push_back(delta[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 52;
            validate_non_negative_index("betaP_c", "(useCov * n_c)", (useCov * n_c));
            vector<double> betaP_c((useCov * n_c), 0.0);
            stan::math::initialize(betaP_c, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(betaP_c,DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("betaP_b", "((useCov * n_b) * bioInd)", ((useCov * n_b) * bioInd));
            vector<double> betaP_b(((useCov * n_b) * bioInd), 0.0);
            stan::math::initialize(betaP_b, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(betaP_b,DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("sigma", "(n_c * (1 - bioInd))", (n_c * (1 - bioInd)));
            vector<double> sigma((n_c * (1 - bioInd)), 0.0);
            stan::math::initialize(sigma, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigma,DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("sigmab", "(n_b * bioInd)", (n_b * bioInd));
            vector<double> sigmab((n_b * bioInd), 0.0);
            stan::math::initialize(sigmab, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigmab,DUMMY_VAR__);


            current_statement_begin__ = 58;
            if (as_bool(logical_eq(bioInd,0))) {

                current_statement_begin__ = 59;
                for (int i = 1; i <= n_c; ++i) {

                    current_statement_begin__ = 60;
                    stan::math::assign(get_base1_lhs(sigma,i,"sigma",1), (scale * get_base1(sigma_raw,i,"sigma_raw",1)));
                }
            }
            current_statement_begin__ = 64;
            if (as_bool(logical_eq(bioInd,1))) {

                current_statement_begin__ = 65;
                for (int i = 1; i <= n_b; ++i) {

                    current_statement_begin__ = 66;
                    stan::math::assign(get_base1_lhs(sigmab,i,"sigmab",1), (scale * get_base1(sigma_rawb,i,"sigma_rawb",1)));
                }
            }
            current_statement_begin__ = 80;
            if (as_bool((primitive_value(logical_eq(bioInd,0)) && primitive_value(logical_gt(useCov,0))))) {

                current_statement_begin__ = 81;
                for (int i = 1; i <= n_c; ++i) {

                    current_statement_begin__ = 82;
                    stan::math::assign(get_base1_lhs(betaP_c,i,"betaP_c",1), (get_base1(beta,i,"beta",1) * (1 + get_base1(delta,useCov,"delta",1))));
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 52;
            current_statement_begin__ = 53;
            current_statement_begin__ = 54;
            for (int k0__ = 0; k0__ < (n_c * (1 - bioInd)); ++k0__) {
                check_greater_or_equal(function__,"sigma[k0__]",sigma[k0__],0);
            }
            current_statement_begin__ = 55;
            for (int k0__ = 0; k0__ < (n_b * bioInd); ++k0__) {
                check_greater_or_equal(function__,"sigmab[k0__]",sigmab[k0__],0);
            }

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < (useCov * n_c); ++k_0__) {
            vars__.push_back(betaP_c[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < ((useCov * n_b) * bioInd); ++k_0__) {
            vars__.push_back(betaP_b[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (n_c * (1 - bioInd)); ++k_0__) {
            vars__.push_back(sigma[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (n_b * bioInd); ++k_0__) {
            vars__.push_back(sigmab[k_0__]);
            }

            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_allModels";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_c; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_b * bioInd); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_c * (1 - bioInd)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_b * bioInd); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rawb" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_ptm; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= useCov; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= (useCov * n_c); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaP_c" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((useCov * n_b) * bioInd); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaP_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_c * (1 - bioInd)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_b * bioInd); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmab" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_c; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_b * bioInd); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_c * (1 - bioInd)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_b * bioInd); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rawb" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_ptm; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= useCov; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= (useCov * n_c); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaP_c" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((useCov * n_b) * bioInd); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaP_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_c * (1 - bioInd)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_b * bioInd); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmab" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

}




// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_testModel_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_testModel");
    reader.add_event(51, 51, "end", "model_testModel");
    return reader;
}

class model_testModel : public prob_grad {
private:
    int N_;
    int n_b;
    int n_t;
    vector<int> bioID;
    vector<int> tagID;
    vector<double> lr;
public:
    model_testModel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_testModel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_testModel_namespace::model_testModel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N_", "int", context__.to_vec());
            N_ = int(0);
            vals_i__ = context__.vals_i("N_");
            pos__ = 0;
            N_ = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "n_b", "int", context__.to_vec());
            n_b = int(0);
            vals_i__ = context__.vals_i("n_b");
            pos__ = 0;
            n_b = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_t", "int", context__.to_vec());
            n_t = int(0);
            vals_i__ = context__.vals_i("n_t");
            pos__ = 0;
            n_t = vals_i__[pos__++];
            current_statement_begin__ = 8;
            validate_non_negative_index("bioID", "N_", N_);
            context__.validate_dims("data initialization", "bioID", "int", context__.to_vec(N_));
            validate_non_negative_index("bioID", "N_", N_);
            bioID = std::vector<int>(N_,int(0));
            vals_i__ = context__.vals_i("bioID");
            pos__ = 0;
            size_t bioID_limit_0__ = N_;
            for (size_t i_0__ = 0; i_0__ < bioID_limit_0__; ++i_0__) {
                bioID[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("tagID", "N_", N_);
            context__.validate_dims("data initialization", "tagID", "int", context__.to_vec(N_));
            validate_non_negative_index("tagID", "N_", N_);
            tagID = std::vector<int>(N_,int(0));
            vals_i__ = context__.vals_i("tagID");
            pos__ = 0;
            size_t tagID_limit_0__ = N_;
            for (size_t i_0__ = 0; i_0__ < tagID_limit_0__; ++i_0__) {
                tagID[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("lr", "N_", N_);
            context__.validate_dims("data initialization", "lr", "double", context__.to_vec(N_));
            validate_non_negative_index("lr", "N_", N_);
            lr = std::vector<double>(N_,double(0));
            vals_r__ = context__.vals_r("lr");
            pos__ = 0;
            size_t lr_limit_0__ = N_;
            for (size_t i_0__ = 0; i_0__ < lr_limit_0__; ++i_0__) {
                lr[i_0__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"N_",N_,0);
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"n_b",n_b,0);
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"n_t",n_t,0);
            current_statement_begin__ = 8;
            for (int k0__ = 0; k0__ < N_; ++k0__) {
                check_greater_or_equal(function__,"bioID[k0__]",bioID[k0__],0);
                check_less_or_equal(function__,"bioID[k0__]",bioID[k0__],n_b);
            }
            current_statement_begin__ = 10;
            for (int k0__ = 0; k0__ < N_; ++k0__) {
                check_greater_or_equal(function__,"tagID[k0__]",tagID[k0__],0);
                check_less_or_equal(function__,"tagID[k0__]",tagID[k0__],n_t);
            }
            current_statement_begin__ = 12;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 17;
            validate_non_negative_index("beta_b", "n_b", n_b);
            num_params_r__ += n_b;
            current_statement_begin__ = 18;
            ++num_params_r__;
            current_statement_begin__ = 20;
            validate_non_negative_index("sigma_raw", "n_b", n_b);
            num_params_r__ += n_b;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_testModel() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta_b")))
            throw std::runtime_error("variable beta_b missing");
        vals_r__ = context__.vals_r("beta_b");
        pos__ = 0U;
        validate_non_negative_index("beta_b", "n_b", n_b);
        context__.validate_dims("initialization", "beta_b", "double", context__.to_vec(n_b));
        std::vector<double> beta_b(n_b,double(0));
        for (int i0__ = 0U; i0__ < n_b; ++i0__)
            beta_b[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_b; ++i0__)
            try {
            writer__.scalar_unconstrain(beta_b[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_b: ") + e.what());
        }

        if (!(context__.contains_r("scale")))
            throw std::runtime_error("variable scale missing");
        vals_r__ = context__.vals_r("scale");
        pos__ = 0U;
        context__.validate_dims("initialization", "scale", "double", context__.to_vec());
        double scale(0);
        scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,scale);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable scale: ") + e.what());
        }

        if (!(context__.contains_r("sigma_raw")))
            throw std::runtime_error("variable sigma_raw missing");
        vals_r__ = context__.vals_r("sigma_raw");
        pos__ = 0U;
        validate_non_negative_index("sigma_raw", "n_b", n_b);
        context__.validate_dims("initialization", "sigma_raw", "double", context__.to_vec(n_b));
        std::vector<double> sigma_raw(n_b,double(0));
        for (int i0__ = 0U; i0__ < n_b; ++i0__)
            sigma_raw[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_b; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_raw: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            vector<T__> beta_b;
            size_t dim_beta_b_0__ = n_b;
            beta_b.reserve(dim_beta_b_0__);
            for (size_t k_0__ = 0; k_0__ < dim_beta_b_0__; ++k_0__) {
                if (jacobian__)
                    beta_b.push_back(in__.scalar_constrain(lp__));
                else
                    beta_b.push_back(in__.scalar_constrain());
            }

            T__ scale;
            (void) scale;  // dummy to suppress unused var warning
            if (jacobian__)
                scale = in__.scalar_lb_constrain(0,lp__);
            else
                scale = in__.scalar_lb_constrain(0);

            vector<T__> sigma_raw;
            size_t dim_sigma_raw_0__ = n_b;
            sigma_raw.reserve(dim_sigma_raw_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sigma_raw_0__; ++k_0__) {
                if (jacobian__)
                    sigma_raw.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sigma_raw.push_back(in__.scalar_lb_constrain(0));
            }


            // transformed parameters
            current_statement_begin__ = 24;
            validate_non_negative_index("sigma", "n_b", n_b);
            vector<T__> sigma(n_b);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma,DUMMY_VAR__);


            current_statement_begin__ = 25;
            for (int i = 1; i <= n_b; ++i) {

                current_statement_begin__ = 26;
                stan::math::assign(get_base1_lhs(sigma,i,"sigma",1), (get_base1(sigma_raw,i,"sigma_raw",1) * scale));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < n_b; ++i0__) {
                if (stan::math::is_uninitialized(sigma[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 24;
            for (int k0__ = 0; k0__ < n_b; ++k0__) {
                check_greater_or_equal(function__,"sigma[k0__]",sigma[k0__],0);
            }

            // model body

            current_statement_begin__ = 32;
            lp_accum__.add(normal_log<propto__>(scale, 0, 4));
            current_statement_begin__ = 33;
            for (int i = 1; i <= n_b; ++i) {

                current_statement_begin__ = 34;
                lp_accum__.add(cauchy_log<propto__>(get_base1(sigma_raw,i,"sigma_raw",1), 0, 1));
            }
            current_statement_begin__ = 39;
            for (int i = 1; i <= n_b; ++i) {

                current_statement_begin__ = 40;
                lp_accum__.add(normal_log<propto__>(get_base1(beta_b,i,"beta_b",1), 0, 10));
            }
            current_statement_begin__ = 42;
            for (int i = 1; i <= N_; ++i) {

                current_statement_begin__ = 43;
                lp_accum__.add(normal_log<propto__>(get_base1(lr,i,"lr",1), get_base1(beta_b,get_base1(bioID,i,"bioID",1),"beta_b",1), get_base1(sigma,get_base1(bioID,i,"bioID",1),"sigma",1)));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_b");
        names__.push_back("scale");
        names__.push_back("sigma_raw");
        names__.push_back("sigma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_b);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_b);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_b);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_testModel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> beta_b;
        size_t dim_beta_b_0__ = n_b;
        for (size_t k_0__ = 0; k_0__ < dim_beta_b_0__; ++k_0__) {
            beta_b.push_back(in__.scalar_constrain());
        }
        double scale = in__.scalar_lb_constrain(0);
        vector<double> sigma_raw;
        size_t dim_sigma_raw_0__ = n_b;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_raw_0__; ++k_0__) {
            sigma_raw.push_back(in__.scalar_lb_constrain(0));
        }
            for (int k_0__ = 0; k_0__ < n_b; ++k_0__) {
            vars__.push_back(beta_b[k_0__]);
            }
        vars__.push_back(scale);
            for (int k_0__ = 0; k_0__ < n_b; ++k_0__) {
            vars__.push_back(sigma_raw[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 24;
            validate_non_negative_index("sigma", "n_b", n_b);
            vector<double> sigma(n_b, 0.0);
            stan::math::initialize(sigma, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigma,DUMMY_VAR__);


            current_statement_begin__ = 25;
            for (int i = 1; i <= n_b; ++i) {

                current_statement_begin__ = 26;
                stan::math::assign(get_base1_lhs(sigma,i,"sigma",1), (get_base1(sigma_raw,i,"sigma_raw",1) * scale));
            }

            // validate transformed parameters
            current_statement_begin__ = 24;
            for (int k0__ = 0; k0__ < n_b; ++k0__) {
                check_greater_or_equal(function__,"sigma[k0__]",sigma[k0__],0);
            }

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < n_b; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
            }

            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_testModel";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

}




#endif
